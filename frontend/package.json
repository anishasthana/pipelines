{
  "name": "pipelines-frontend",
  "version": "0.1.0",
  "license": "Apache-2.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.11.1",
    "@emotion/styled": "^11.11.0",
    "@mui/icons-material": "^5.14.20",
    "@mui/lab": "^5.0.0-alpha.155",
    "@mui/material": "^5.14.20",
    "ace-builds": "^1.24.1",
    "axios": "^1.6.2",
    "d3": "^7.8.5",
    "d3-dsv": "^3.0.1",
    "dagre": "^0.8.5",
    "debug": "^4.3.4",
    "formidable": "^3.5.1",
    "glob": "^10.3.10",
    "http-proxy-middleware": "^2.0.6",
    "lodash": "^4.17.21",
    "markdown-it": "^13.0.2",
    "react": "^18.2.0",
    "react-ace": "^10.1.0",
    "react-dom": "^18.2.0",
    "react-dropzone": "^14.2.3",
    "react-flow-renderer": "^10.3.17",
    "react-query": "^3.39.3",
    "react-router-dom": "^6.20.1",
    "react-scripts": "^3.0.1",
    "react-textarea-autosize": "^8.5.3",
    "react-virtualized": "^9.22.5",
    "recharts": "^2.10.3",
    "rimraf": "^5.0.5",
    "superagent": "^8.1.2",
    "uuid": "^9.0.1"
  },
  "scripts": {
    "analyze-bundle": "node analyze_bundle.js",
    "apis": "npm run apis:experiment && npm run apis:job && npm run apis:pipeline && npm run apis:run && npm run apis:filter && npm run apis:visualization && npm run apis:auth",
    "apis:experiment": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/swagger/experiment.swagger.json -l typescript-fetch -o ./src/apis/experiment -c ./swagger-config.json",
    "apis:job": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/swagger/job.swagger.json -l typescript-fetch -o ./src/apis/job -c ./swagger-config.json",
    "apis:pipeline": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/swagger/pipeline.swagger.json -l typescript-fetch -o ./src/apis/pipeline -c ./swagger-config.json",
    "apis:run": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/swagger/run.swagger.json -l typescript-fetch -o ./src/apis/run -c ./swagger-config.json",
    "apis:filter": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/swagger/filter.swagger.json -l typescript-fetch -o ./src/apis/filter -c ./swagger-config.json",
    "apis:visualization": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/swagger/visualization.swagger.json -l typescript-fetch -o ./src/apis/visualization -c ./swagger-config.json",
    "apis:auth": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/swagger/auth.swagger.json -l typescript-fetch -o ./server/src/generated/apis/auth -c ./swagger-config.json",
    "apis:v2beta1": "npm run apis:v2beta1:experiment && npm run apis:v2beta1:recurringrun && npm run apis:v2beta1:pipeline && npm run apis:v2beta1:run && npm run apis:v2beta1:filter && npm run apis:v2beta1:visualization && npm run apis:v2beta1:auth",
    "apis:v2beta1:experiment": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/v2beta1/swagger/experiment.swagger.json -l typescript-fetch -o ./src/apisv2beta1/experiment -c ./swagger-config.json",
    "apis:v2beta1:recurringrun": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/v2beta1/swagger/recurring_run.swagger.json -l typescript-fetch -o ./src/apisv2beta1/recurringrun -c ./swagger-config.json",
    "apis:v2beta1:pipeline": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/v2beta1/swagger/pipeline.swagger.json -l typescript-fetch -o ./src/apisv2beta1/pipeline -c ./swagger-config.json",
    "apis:v2beta1:run": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/v2beta1/swagger/run.swagger.json -l typescript-fetch -o ./src/apisv2beta1/run -c ./swagger-config.json",
    "apis:v2beta1:filter": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/v2beta1/swagger/filter.swagger.json -l typescript-fetch -o ./src/apisv2beta1/filter -c ./swagger-config.json",
    "apis:v2beta1:visualization": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/v2beta1/swagger/visualization.swagger.json -l typescript-fetch -o ./src/apisv2beta1/visualization -c ./swagger-config.json",
    "apis:v2beta1:auth": "java -jar swagger-codegen-cli.jar generate -i ../backend/api/v2beta1/swagger/auth.swagger.json -l typescript-fetch -o ./server/src/generated/apisv2beta1/auth -c ./swagger-config.json",
    "build:tailwind": "npx tailwindcss build -i src/tailwind.css -o src/build/tailwind.output.css",
    "prestart": "npm run build:tailwind",
    "prebuild": "npm run build:tailwind",
    "build": "npm run lint && EXTEND_ESLINT=true react-scripts build",
    "build:protos": "cd .. && node frontend/scripts/gen_grpc_web_protos.js",
    "build:replace": "node scripts/replace_protos.js",
    "build:platform-spec:kubernetes-platform": "bash ./scripts/k8splatformspec.sh",
    "build:pipeline-spec": "bash ./scripts/pipelinespec.sh",
    "docker": "COMMIT_HASH=`git rev-parse HEAD`; docker build -q -t ml-pipelines-frontend:${COMMIT_HASH} --build-arg COMMIT_HASH=${COMMIT_HASH} --build-arg DATE=\"`date -u`\" -f Dockerfile ..",
    "eject": "react-scripts eject",
    "format": "prettier --write './**/*.{ts,tsx}'",
    "format:check": "prettier --check './**/*.{ts,tsx}' || node ./scripts/check-format-error-info.js",
    "gen-licenses": "node gen_licenses . && node gen_licenses server && rm dependency-licenses.txt && rm server/dependency-licenses.txt",
    "java": "java -version",
    "lint": "eslint --ext js,ts,tsx src --max-warnings=0",
    "mock:api": "ts-node-dev -O '{\"module\": \"commonjs\"}' --project mock-backend/tsconfig.json -r tsconfig-paths/register mock-backend/mock-api-server.ts 3001",
    "mock:server": "node server/dist/server.js build",
    "mock:server:inspect": "node inspect server/dist/server.js build",
    "postinstall": "cd ./server && npm ci && cd ../mock-backend && npm ci",
    "start:proxy": "./scripts/start-proxy.sh",
    "start:proxy-and-server": "./scripts/start-proxy-and-server.sh",
    "start:proxy-and-server-inspect": "./scripts/start-proxy-and-server.sh --inspect",
    "start": "EXTEND_ESLINT=true react-scripts start",
    "sync-backend-sample-config": "node scripts/sync-backend-sample-config.js",
    "pretest": "npm run build:tailwind",
    "test": "LC_ALL=\"en_US.UTF-8\" react-scripts test --env=jsdom",
    "test:server:coverage": "cd ./server && npm test -- --coverage && cd ..",
    "test:coverage": "npm test -- --coverage && npm run test:server:coverage",
    "test:ci": "export CI=true && npm run format:check && npm run lint && npm run test:coverage",
    "storybook": "start-storybook -p 6006 -s public",
    "build:storybook": "build-storybook -s public"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.1.5",
    "@testing-library/react": "^14.1.2",
    "@testing-library/user-event": "^14.5.1",
    "@types/d3": "^7.4.3",
    "@types/dagre": "^0.7.52",
    "@types/jest": "^29.5.10",
    "@types/lodash": "^4.14.202",
    "@types/markdown-it": "^13.0.7",
    "@types/node": "^20.10.3",
    "@types/react": "^18.2.42",
    "@types/react-dom": "^18.2.17",
    "@types/react-router-dom": "^5.3.3",
    "@types/react-virtualized": "^9.21.29",
    "jest-environment-jsdom": "^29.7.0",
    "postcss": "^8.4.31",
    "tailwindcss": "^3.3.5",
    "typescript": "^5.3.2"
  },
  "resolutions": {
    "nth-check": "^2.0.1",
    "postcss": "^8.4.31",
    "webpack": "^5.89.0",
    "workbox-webpack-plugin": "6.6.0"
  },
  "overrides": {
    "nanoid": "3.3.8",
    "express": {
      "path-to-regexp": "0.1.12"
    }
  },
  "homepage": "./",
  "jest": {
    "collectCoverageFrom": [
      "src/**/*.{ts,tsx}",
      "!src/**/*.d.ts",
      "!src/apis/**/*.ts",
      "!src/icons/*.tsx",
      "!src/third_party/*",
      "!src/index.tsx",
      "!src/CSSReset.tsx"
    ],
    "globalSetup": "./global-setup.js",
    "snapshotSerializers": [
      "./src/__serializers__/mock-function",
      "snapshot-diff/serializer.js",
      "enzyme-to-json/serializer"
    ]
  },
  "proxy": "http://localhost:3001",
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "eslintConfig": {
    "overrides": [
      {
        "files": [
          "**/*.stories.*"
        ],
        "rules": {
          "import/no-anonymous-default-export": "off"
        }
      }
    ]
  }
}
